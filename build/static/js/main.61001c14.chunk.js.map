{"version":3,"sources":["components/chatSettings.js","App.js","serviceWorker.js","index.js"],"names":["chatSettings","className","id","onChange","this","props","handleVoiceChange","value","Component","ResponsiveReactGridLayout","WidthProvider","Responsive","ToolBoxItem","onClick","onTakeItem","bind","undefined","item","i","React","ToolBox","items","map","key","ToolboxLayout","state","currentBreakpoint","compactType","mounted","layouts","lg","initialLayout","toolbox","onBreakpointChange","breakpoint","setState","prevState","filter","onPutItem","_","l","onLayoutChange","measureBeforeMount","useCSSTransforms","preventCollision","generateDOM","defaultProps","rowHeight","cols","md","sm","xs","xxs","range","x","y","w","h","toString","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.61001c14.chunk.js","sourcesContent":["import React,\n{\n  Component\n}\nfrom \"react\";\nimport './chatSettings.css';\n\nclass chatSettings extends Component\n{\n  // constructor(props)\n  // {\n  //   super(props);\n  //   console.log(this.props);\n  //   console.log(\"You created a chat settings component\");\n  // }\n  render()\n  {\n    return (\n\n      <div className=\"chatSettings\">\n        <table>\n          <tbody>\n            <tr>\n              <td>Robot Voice Selection:</td>\n              <td>\n                <select id=\"pet-select\" onChange={this.props.handleVoiceChange}>\n                  <option value=\"\">--Please choose an option--</option>\n                  <option value=\"BB8\">BB8 Voice</option>\n                  <option value=\"Salli\">Salli</option>\n                  <option value=\"Kimberly\">Kimberly</option>\n                  <option value=\"Kendra\">Kendra</option>\n                  <option value=\"Ivy\">Ivy</option>\n                  <option value=\"Matthew\">Matthew</option>\n                  <option value=\"Justin\">Justin</option>\n                  <option value=\"Joey\">Joey</option>\n                  <option value=\"Cristiano\">Cristiano</option>\n                </select>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n    )\n  }\n}\n\nexport default chatSettings;\n","import React from \"react\";\nimport _ from \"lodash\";\nimport '../node_modules/react-grid-layout/css/styles.css';\nimport '../node_modules/react-resizable/css/styles.css';\nimport './App.css';\nimport { Responsive, WidthProvider } from \"react-grid-layout\";\n//import ChatComponent from './components/ChatComponent.js';\n//import QuickCommands from './components/QuickCommands.js';\n//import QuickCommandsList from './components/QuickCommandsList.js';\nimport ChatSettings from './components/chatSettings.js';\n//import SpeechCommands from './components/SpeechCommands.js';\n//import Threedeespace from './components/threedeespace.js';\n//import io from 'socket.io-client';\n//const socket = io('https://fusionpaloalto.elliotsyoung.com');\nconst ResponsiveReactGridLayout = WidthProvider(Responsive);\n\nclass ToolBoxItem extends React.Component {\n  render() {\n    return (\n      <div\n        className=\"toolbox__items__item\"\n        onClick={this.props.onTakeItem.bind(undefined, this.props.item)}\n      >\n        {this.props.item.i}\n      </div>\n    );\n  }\n}\nclass ToolBox extends React.Component {\n  render() {\n    return (\n      <div className=\"toolbox\">\n        <span className=\"toolbox__title\"><center>Toolbox</center></span>\n        <div className=\"toolbox__items\">\n          {this.props.items.map(item => (\n            <ToolBoxItem\n              key={item.i}\n              item={item}\n              onTakeItem={this.props.onTakeItem}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default class ToolboxLayout extends React.Component {\n  static defaultProps = {\n    className: \"layout\",\n    rowHeight: 30,\n    onLayoutChange: function() {},\n    cols: { lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 },\n    initialLayout: generateLayout()\n  };\n\n  state = {\n    currentBreakpoint: \"lg\",\n    compactType: \"vertical\",\n    mounted: false,\n    layouts: { lg: this.props.initialLayout },\n    toolbox: { lg: [] }\n  };\n\n  componentDidMount() {\n    this.setState({ mounted: true });\n  }\n\n  generateDOM() {\n    return _.map(this.state.layouts[this.state.currentBreakpoint], l => {\n      return (\n        <div key={l.i}>\n          <div className=\"hide-button\" onClick={this.onPutItem.bind(this, l)}>\n            &times;\n          </div>\n          {\n            <span className=\"text\"><ChatSettings handleVoiceChange={this.handleVoiceChange}/></span>\n          }\n        </div>\n      );\n    });\n  }\n\n  onBreakpointChange = breakpoint => {\n    this.setState(prevState => ({\n      currentBreakpoint: breakpoint,\n      toolbox: {\n        ...prevState.toolbox,\n        [breakpoint]:\n          prevState.toolbox[breakpoint] ||\n          prevState.toolbox[prevState.currentBreakpoint] ||\n          []\n      }\n    }));\n  };\n\n  onTakeItem = item => {\n    this.setState(prevState => ({\n      toolbox: {\n        ...prevState.toolbox,\n        [prevState.currentBreakpoint]: prevState.toolbox[\n          prevState.currentBreakpoint\n        ].filter(({ i }) => i !== item.i)\n      },\n      layouts: {\n        ...prevState.layouts,\n        [prevState.currentBreakpoint]: [\n          ...prevState.layouts[prevState.currentBreakpoint],\n          item\n        ]\n      }\n    }));\n  };\n\n  onPutItem = item => {\n    this.setState(prevState => {\n      return {\n        toolbox: {\n          ...prevState.toolbox,\n          [prevState.currentBreakpoint]: [\n            ...(prevState.toolbox[prevState.currentBreakpoint] || []),\n            item\n          ]\n        },\n        layouts: {\n          ...prevState.layouts,\n          [prevState.currentBreakpoint]: prevState.layouts[\n            prevState.currentBreakpoint\n          ].filter(({ i }) => i !== item.i)\n        }\n      };\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <ToolBox\n          items={this.state.toolbox[this.state.currentBreakpoint] || []}\n          onTakeItem={this.onTakeItem}\n        />\n\n        <ResponsiveReactGridLayout\n          {...this.props}\n          layouts={this.state.layouts}\n          onBreakpointChange={this.onBreakpointChange}\n          onLayoutChange={this.onLayoutChange}\n          // WidthProvider option\n          measureBeforeMount={false}\n          // I like to have it animate on mount. If you don't, delete `useCSSTransforms` (it's default `true`)\n          // and set `measureBeforeMount={true}`.\n          useCSSTransforms={this.state.mounted}\n          compactType={this.state.compactType}\n          preventCollision={!this.state.compactType}\n        >\n          {this.generateDOM()}\n        </ResponsiveReactGridLayout>\n      </div>\n    );\n  }\n}\n\nfunction generateLayout() {\n  return _.map(_.range(0, 1), function(item, i) {\n    return {\n      x: 0,\n      y: 0,\n      w: 4,\n      h: 2,\n      i: i.toString()\n        };\n  });\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}